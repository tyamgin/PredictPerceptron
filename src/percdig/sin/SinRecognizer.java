/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SinRecognizer.java
 *
 * Created on 17.04.2013, 10:12:11
 */
package percdig.sin;

import ai.*;
import Utills.Utills;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Stroke;
import java.text.NumberFormat;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.TickUnitSource;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author tyamgin
 */
public class SinRecognizer extends javax.swing.JFrame 
{

    /** Creates new form SinRecognizer */
    public SinRecognizer() 
    {
        initComponents();
        
        dataset = new DefaultXYDataset();
        chart = createChart(dataset);
        original = getOriginalSin(0, 65);        
        perceptron = new Perceptron2(inNeurons, innerNeurons, outNeurons);
        TrendTeacher teacher = new TrendTeacher(perceptron);
        teacher.debugOutput = false;
        //teacher.teach(original[1], 10000);
        //teacher.teachInRandomOrder(original[1], 500000);
        teacher.teach(original[1], 75);
        
        renderer.setSeriesPaint(0, Color.LIGHT_GRAY);
        renderer.setSeriesItemLabelFont(0, new Font("SansSerif", Font.BOLD, 9), true);
        dataset.addSeries("Sin", original);
        predict( new double[] { 0.0, 0.1, 0.2 }, 0 );
        predict( new double[] { 0.52, 0.43, 0.33 }, 26 );
        predict( new double[] { -0.16, -0.26, -0.35 }, 33 );
        
        predict( new double[] { 0.02, 0.12, 0.22 }, 63 );
        
        ChartPanel chartPanel = new ChartPanel(chart, false);
        setContentPane(chartPanel);
    }
    
    void predict(double[] recX, int start)
    {
        double[] ans = perceptron.recognize(recX);
        for(int i = 0; i < ans.length; i++)
            ans[i] = ans[i] * 2 - 1.0;
        double[] x = Utills.concat(recX, ans);
        renderer.setSeriesItemLabelsVisible(dataset.getSeriesCount(), false);
        dataset.addSeries("prediction " + dataset.getSeriesCount(), new double[][] {Utills.range(start, start + x.length - 1), x});
    }
    
    double Sin(int t)
    {
        return Math.sin(t / 10.0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    DefaultXYDataset dataset;
    JFreeChart chart;
    XYLineAndShapeRenderer renderer;
    double[][] original;
    int inNeurons = 3;
    int innerNeurons = 40;
    int outNeurons = 25;
    Perceptron2 perceptron;
    
    double[][] getOriginalSin(int a, int b)
    {
        double[][] data = new double[2][b - a + 1];
        
        int idx = 0;
        for(int x = a; x <= b; x++)
        {
            data[0][idx] = x;
            data[1][idx] = Sin(x);
            idx++;
        }
        return data;
    }
    
    /**
     * Create a chart.
     *
     * @param dataset the dataset
     * @return the chart
     */
    private JFreeChart createChart(XYDataset dataset) 
    {
        // create the chart...
        JFreeChart chart = ChartFactory.createXYLineChart(
            "Trend prediction", // chart title
            "Time", // domain axis label
            "Price", // range axis label
            dataset,  // initial series
            PlotOrientation.VERTICAL, // orientation
            true, // include legend
            true, // tooltips?
            false // URLs?
            );

        // set chart background
        chart.setBackgroundPaint(Color.white);

        // set a few custom plot features
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(new Color(0xffffe0));
        plot.setDomainGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.lightGray);
        plot.setRangeGridlinePaint(Color.lightGray);

        // set the plot's axes to display integers
        TickUnitSource ticks = NumberAxis.createIntegerTickUnits();
        NumberAxis domain = (NumberAxis) plot.getDomainAxis();
        domain.setStandardTickUnits(ticks);
        NumberAxis range = (NumberAxis) plot.getRangeAxis();
        range.setStandardTickUnits(ticks);

        // render shapes and lines
        renderer = new XYLineAndShapeRenderer(true, true);
        plot.setRenderer(renderer);
        renderer.setBaseShapesVisible(true);
        renderer.setBaseShapesFilled(true);

        // set the renderer's stroke
        Stroke stroke = new BasicStroke(0.9f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL);
        renderer.setBaseOutlineStroke(stroke);

        // label the points
        NumberFormat format = NumberFormat.getNumberInstance();
        format.setMaximumFractionDigits(2);
        XYItemLabelGenerator generator = new StandardXYItemLabelGenerator(
                StandardXYItemLabelGenerator.DEFAULT_ITEM_LABEL_FORMAT,
                format, format
              );
        renderer.setBaseItemLabelGenerator(generator);
        renderer.setBaseItemLabelsVisible(true);

        return chart;
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SinRecognizer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
